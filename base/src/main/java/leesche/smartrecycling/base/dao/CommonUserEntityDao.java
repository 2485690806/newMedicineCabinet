package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.CommonUserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMON_USER_ENTITY".
*/
public class CommonUserEntityDao extends AbstractDao<CommonUserEntity, Long> {

    public static final String TABLENAME = "COMMON_USER_ENTITY";

    /**
     * Properties of entity CommonUserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property App_user_token = new Property(1, String.class, "app_user_token", false, "APP_USER_TOKEN");
        public final static Property AgentId = new Property(2, int.class, "agentId", false, "AGENT_ID");
        public final static Property UserId = new Property(3, int.class, "userId", false, "USER_ID");
        public final static Property User_type = new Property(4, String.class, "user_type", false, "USER_TYPE");
        public final static Property App_recycler_token = new Property(5, String.class, "app_recycler_token", false, "APP_RECYCLER_TOKEN");
        public final static Property Role = new Property(6, String.class, "role", false, "ROLE");
        public final static Property HeadImgUrl = new Property(7, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property NickName = new Property(9, String.class, "nickName", false, "NICK_NAME");
        public final static Property LicensePlateNumber = new Property(10, String.class, "licensePlateNumber", false, "LICENSE_PLATE_NUMBER");
        public final static Property IcCard = new Property(11, String.class, "icCard", false, "IC_CARD");
        public final static Property Type = new Property(12, String.class, "type", false, "TYPE");
        public final static Property WeightValue = new Property(13, int.class, "weightValue", false, "WEIGHT_VALUE");
        public final static Property UserAddress = new Property(14, String.class, "userAddress", false, "USER_ADDRESS");
        public final static Property TotalPoint = new Property(15, int.class, "totalPoint", false, "TOTAL_POINT");
        public final static Property LoginType = new Property(16, String.class, "loginType", false, "LOGIN_TYPE");
        public final static Property LoginValue = new Property(17, String.class, "loginValue", false, "LOGIN_VALUE");
        public final static Property StartTimeStamp = new Property(18, long.class, "startTimeStamp", false, "START_TIME_STAMP");
        public final static Property EndTimeStamp = new Property(19, long.class, "endTimeStamp", false, "END_TIME_STAMP");
    }


    public CommonUserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CommonUserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMON_USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_USER_TOKEN\" TEXT," + // 1: app_user_token
                "\"AGENT_ID\" INTEGER NOT NULL ," + // 2: agentId
                "\"USER_ID\" INTEGER NOT NULL ," + // 3: userId
                "\"USER_TYPE\" TEXT," + // 4: user_type
                "\"APP_RECYCLER_TOKEN\" TEXT," + // 5: app_recycler_token
                "\"ROLE\" TEXT," + // 6: role
                "\"HEAD_IMG_URL\" TEXT," + // 7: headImgUrl
                "\"PHONE\" TEXT," + // 8: phone
                "\"NICK_NAME\" TEXT," + // 9: nickName
                "\"LICENSE_PLATE_NUMBER\" TEXT," + // 10: licensePlateNumber
                "\"IC_CARD\" TEXT," + // 11: icCard
                "\"TYPE\" TEXT," + // 12: type
                "\"WEIGHT_VALUE\" INTEGER NOT NULL ," + // 13: weightValue
                "\"USER_ADDRESS\" TEXT," + // 14: userAddress
                "\"TOTAL_POINT\" INTEGER NOT NULL ," + // 15: totalPoint
                "\"LOGIN_TYPE\" TEXT," + // 16: loginType
                "\"LOGIN_VALUE\" TEXT," + // 17: loginValue
                "\"START_TIME_STAMP\" INTEGER NOT NULL ," + // 18: startTimeStamp
                "\"END_TIME_STAMP\" INTEGER NOT NULL );"); // 19: endTimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMON_USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommonUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String app_user_token = entity.getApp_user_token();
        if (app_user_token != null) {
            stmt.bindString(2, app_user_token);
        }
        stmt.bindLong(3, entity.getAgentId());
        stmt.bindLong(4, entity.getUserId());
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(5, user_type);
        }
 
        String app_recycler_token = entity.getApp_recycler_token();
        if (app_recycler_token != null) {
            stmt.bindString(6, app_recycler_token);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(7, role);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(8, headImgUrl);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(10, nickName);
        }
 
        String licensePlateNumber = entity.getLicensePlateNumber();
        if (licensePlateNumber != null) {
            stmt.bindString(11, licensePlateNumber);
        }
 
        String icCard = entity.getIcCard();
        if (icCard != null) {
            stmt.bindString(12, icCard);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
        stmt.bindLong(14, entity.getWeightValue());
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(15, userAddress);
        }
        stmt.bindLong(16, entity.getTotalPoint());
 
        String loginType = entity.getLoginType();
        if (loginType != null) {
            stmt.bindString(17, loginType);
        }
 
        String loginValue = entity.getLoginValue();
        if (loginValue != null) {
            stmt.bindString(18, loginValue);
        }
        stmt.bindLong(19, entity.getStartTimeStamp());
        stmt.bindLong(20, entity.getEndTimeStamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommonUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String app_user_token = entity.getApp_user_token();
        if (app_user_token != null) {
            stmt.bindString(2, app_user_token);
        }
        stmt.bindLong(3, entity.getAgentId());
        stmt.bindLong(4, entity.getUserId());
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(5, user_type);
        }
 
        String app_recycler_token = entity.getApp_recycler_token();
        if (app_recycler_token != null) {
            stmt.bindString(6, app_recycler_token);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(7, role);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(8, headImgUrl);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(10, nickName);
        }
 
        String licensePlateNumber = entity.getLicensePlateNumber();
        if (licensePlateNumber != null) {
            stmt.bindString(11, licensePlateNumber);
        }
 
        String icCard = entity.getIcCard();
        if (icCard != null) {
            stmt.bindString(12, icCard);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
        stmt.bindLong(14, entity.getWeightValue());
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(15, userAddress);
        }
        stmt.bindLong(16, entity.getTotalPoint());
 
        String loginType = entity.getLoginType();
        if (loginType != null) {
            stmt.bindString(17, loginType);
        }
 
        String loginValue = entity.getLoginValue();
        if (loginValue != null) {
            stmt.bindString(18, loginValue);
        }
        stmt.bindLong(19, entity.getStartTimeStamp());
        stmt.bindLong(20, entity.getEndTimeStamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommonUserEntity readEntity(Cursor cursor, int offset) {
        CommonUserEntity entity = new CommonUserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // app_user_token
            cursor.getInt(offset + 2), // agentId
            cursor.getInt(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // app_recycler_token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // role
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headImgUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nickName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // licensePlateNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // icCard
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // type
            cursor.getInt(offset + 13), // weightValue
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userAddress
            cursor.getInt(offset + 15), // totalPoint
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // loginType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // loginValue
            cursor.getLong(offset + 18), // startTimeStamp
            cursor.getLong(offset + 19) // endTimeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommonUserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApp_user_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgentId(cursor.getInt(offset + 2));
        entity.setUserId(cursor.getInt(offset + 3));
        entity.setUser_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApp_recycler_token(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRole(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadImgUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNickName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLicensePlateNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIcCard(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWeightValue(cursor.getInt(offset + 13));
        entity.setUserAddress(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTotalPoint(cursor.getInt(offset + 15));
        entity.setLoginType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLoginValue(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStartTimeStamp(cursor.getLong(offset + 18));
        entity.setEndTimeStamp(cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommonUserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommonUserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommonUserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
