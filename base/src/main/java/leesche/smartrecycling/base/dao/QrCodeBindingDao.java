package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.QrCodeBinding;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QR_CODE_BINDING".
*/
public class QrCodeBindingDao extends AbstractDao<QrCodeBinding, Long> {

    public static final String TABLENAME = "QR_CODE_BINDING";

    /**
     * Properties of entity QrCodeBinding.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GridQrCode = new Property(1, String.class, "gridQrCode", false, "GRID_QR_CODE");
        public final static Property ItemQrCode = new Property(2, String.class, "itemQrCode", false, "ITEM_QR_CODE");
        public final static Property Level = new Property(3, int.class, "level", false, "LEVEL");
        public final static Property GridNumber = new Property(4, String.class, "gridNumber", false, "GRID_NUMBER");
        public final static Property OriginalPath = new Property(5, String.class, "originalPath", false, "ORIGINAL_PATH");
        public final static Property CroppedPath = new Property(6, String.class, "croppedPath", false, "CROPPED_PATH");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property BagId = new Property(8, String.class, "bagId", false, "BAG_ID");
    }


    public QrCodeBindingDao(DaoConfig config) {
        super(config);
    }
    
    public QrCodeBindingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QR_CODE_BINDING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GRID_QR_CODE\" TEXT," + // 1: gridQrCode
                "\"ITEM_QR_CODE\" TEXT," + // 2: itemQrCode
                "\"LEVEL\" INTEGER NOT NULL ," + // 3: level
                "\"GRID_NUMBER\" TEXT," + // 4: gridNumber
                "\"ORIGINAL_PATH\" TEXT," + // 5: originalPath
                "\"CROPPED_PATH\" TEXT," + // 6: croppedPath
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 7: timestamp
                "\"BAG_ID\" TEXT);"); // 8: bagId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QR_CODE_BINDING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QrCodeBinding entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gridQrCode = entity.getGridQrCode();
        if (gridQrCode != null) {
            stmt.bindString(2, gridQrCode);
        }
 
        String itemQrCode = entity.getItemQrCode();
        if (itemQrCode != null) {
            stmt.bindString(3, itemQrCode);
        }
        stmt.bindLong(4, entity.getLevel());
 
        String gridNumber = entity.getGridNumber();
        if (gridNumber != null) {
            stmt.bindString(5, gridNumber);
        }
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(6, originalPath);
        }
 
        String croppedPath = entity.getCroppedPath();
        if (croppedPath != null) {
            stmt.bindString(7, croppedPath);
        }
        stmt.bindLong(8, entity.getTimestamp());
 
        String bagId = entity.getBagId();
        if (bagId != null) {
            stmt.bindString(9, bagId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QrCodeBinding entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gridQrCode = entity.getGridQrCode();
        if (gridQrCode != null) {
            stmt.bindString(2, gridQrCode);
        }
 
        String itemQrCode = entity.getItemQrCode();
        if (itemQrCode != null) {
            stmt.bindString(3, itemQrCode);
        }
        stmt.bindLong(4, entity.getLevel());
 
        String gridNumber = entity.getGridNumber();
        if (gridNumber != null) {
            stmt.bindString(5, gridNumber);
        }
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(6, originalPath);
        }
 
        String croppedPath = entity.getCroppedPath();
        if (croppedPath != null) {
            stmt.bindString(7, croppedPath);
        }
        stmt.bindLong(8, entity.getTimestamp());
 
        String bagId = entity.getBagId();
        if (bagId != null) {
            stmt.bindString(9, bagId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QrCodeBinding readEntity(Cursor cursor, int offset) {
        QrCodeBinding entity = new QrCodeBinding( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gridQrCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemQrCode
            cursor.getInt(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gridNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // originalPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // croppedPath
            cursor.getLong(offset + 7), // timestamp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // bagId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QrCodeBinding entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGridQrCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemQrCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
        entity.setGridNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOriginalPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCroppedPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
        entity.setBagId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QrCodeBinding entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QrCodeBinding entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QrCodeBinding entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
