package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.UserLoginStyleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_LOGIN_STYLE_ENTITY".
*/
public class UserLoginStyleEntityDao extends AbstractDao<UserLoginStyleEntity, Long> {

    public static final String TABLENAME = "USER_LOGIN_STYLE_ENTITY";

    /**
     * Properties of entity UserLoginStyleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_phone = new Property(1, String.class, "user_phone", false, "USER_PHONE");
        public final static Property Door_plate_num = new Property(2, String.class, "door_plate_num", false, "DOOR_PLATE_NUM");
        public final static Property Ic_card_num = new Property(3, String.class, "ic_card_num", false, "IC_CARD_NUM");
        public final static Property Qr_code = new Property(4, String.class, "qr_code", false, "QR_CODE");
        public final static Property User_type = new Property(5, int.class, "user_type", false, "USER_TYPE");
    }


    public UserLoginStyleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserLoginStyleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_LOGIN_STYLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_PHONE\" TEXT," + // 1: user_phone
                "\"DOOR_PLATE_NUM\" TEXT," + // 2: door_plate_num
                "\"IC_CARD_NUM\" TEXT," + // 3: ic_card_num
                "\"QR_CODE\" TEXT," + // 4: qr_code
                "\"USER_TYPE\" INTEGER NOT NULL );"); // 5: user_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_LOGIN_STYLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserLoginStyleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(2, user_phone);
        }
 
        String door_plate_num = entity.getDoor_plate_num();
        if (door_plate_num != null) {
            stmt.bindString(3, door_plate_num);
        }
 
        String ic_card_num = entity.getIc_card_num();
        if (ic_card_num != null) {
            stmt.bindString(4, ic_card_num);
        }
 
        String qr_code = entity.getQr_code();
        if (qr_code != null) {
            stmt.bindString(5, qr_code);
        }
        stmt.bindLong(6, entity.getUser_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserLoginStyleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(2, user_phone);
        }
 
        String door_plate_num = entity.getDoor_plate_num();
        if (door_plate_num != null) {
            stmt.bindString(3, door_plate_num);
        }
 
        String ic_card_num = entity.getIc_card_num();
        if (ic_card_num != null) {
            stmt.bindString(4, ic_card_num);
        }
 
        String qr_code = entity.getQr_code();
        if (qr_code != null) {
            stmt.bindString(5, qr_code);
        }
        stmt.bindLong(6, entity.getUser_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserLoginStyleEntity readEntity(Cursor cursor, int offset) {
        UserLoginStyleEntity entity = new UserLoginStyleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // door_plate_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ic_card_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // qr_code
            cursor.getInt(offset + 5) // user_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserLoginStyleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_phone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDoor_plate_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIc_card_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQr_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_type(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserLoginStyleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserLoginStyleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserLoginStyleEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
