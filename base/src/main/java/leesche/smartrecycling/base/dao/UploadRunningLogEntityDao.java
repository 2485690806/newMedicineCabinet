package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.UploadRunningLogEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_RUNNING_LOG_ENTITY".
*/
public class UploadRunningLogEntityDao extends AbstractDao<UploadRunningLogEntity, Long> {

    public static final String TABLENAME = "UPLOAD_RUNNING_LOG_ENTITY";

    /**
     * Properties of entity UploadRunningLogEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, Long.class, "orderId", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property Reason = new Property(2, String.class, "reason", false, "REASON");
        public final static Property PreOrderId = new Property(3, Long.class, "preOrderId", false, "PRE_ORDER_ID");
        public final static Property Timestamp = new Property(4, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
    }


    public UploadRunningLogEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UploadRunningLogEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_RUNNING_LOG_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: orderId
                "\"STATUS\" TEXT," + // 1: status
                "\"REASON\" TEXT," + // 2: reason
                "\"PRE_ORDER_ID\" INTEGER," + // 3: preOrderId
                "\"TIMESTAMP\" INTEGER," + // 4: timestamp
                "\"REMARK\" TEXT);"); // 5: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_RUNNING_LOG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadRunningLogEntity entity) {
        stmt.clearBindings();
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(3, reason);
        }
 
        Long preOrderId = entity.getPreOrderId();
        if (preOrderId != null) {
            stmt.bindLong(4, preOrderId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadRunningLogEntity entity) {
        stmt.clearBindings();
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(3, reason);
        }
 
        Long preOrderId = entity.getPreOrderId();
        if (preOrderId != null) {
            stmt.bindLong(4, preOrderId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadRunningLogEntity readEntity(Cursor cursor, int offset) {
        UploadRunningLogEntity entity = new UploadRunningLogEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reason
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // preOrderId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // timestamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadRunningLogEntity entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReason(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPreOrderId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTimestamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadRunningLogEntity entity, long rowId) {
        entity.setOrderId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadRunningLogEntity entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadRunningLogEntity entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
