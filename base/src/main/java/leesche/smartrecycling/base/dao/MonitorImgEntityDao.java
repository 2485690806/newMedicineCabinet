package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.MonitorImgEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONITOR_IMG_ENTITY".
*/
public class MonitorImgEntityDao extends AbstractDao<MonitorImgEntity, Long> {

    public static final String TABLENAME = "MONITOR_IMG_ENTITY";

    /**
     * Properties of entity MonitorImgEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, String.class, "orderId", false, "ORDER_ID");
        public final static Property MonitorAddress = new Property(2, String.class, "monitorAddress", false, "MONITOR_ADDRESS");
        public final static Property ImgLocalSavePath = new Property(3, String.class, "imgLocalSavePath", false, "IMG_LOCAL_SAVE_PATH");
        public final static Property OssObjectKey = new Property(4, String.class, "ossObjectKey", false, "OSS_OBJECT_KEY");
        public final static Property HaveUploadCount = new Property(5, int.class, "haveUploadCount", false, "HAVE_UPLOAD_COUNT");
        public final static Property LastUploadErrorInfo = new Property(6, String.class, "lastUploadErrorInfo", false, "LAST_UPLOAD_ERROR_INFO");
        public final static Property ToService = new Property(7, Integer.class, "toService", false, "TO_SERVICE");
    }


    public MonitorImgEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorImgEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONITOR_IMG_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: orderId
                "\"MONITOR_ADDRESS\" TEXT," + // 2: monitorAddress
                "\"IMG_LOCAL_SAVE_PATH\" TEXT," + // 3: imgLocalSavePath
                "\"OSS_OBJECT_KEY\" TEXT," + // 4: ossObjectKey
                "\"HAVE_UPLOAD_COUNT\" INTEGER NOT NULL ," + // 5: haveUploadCount
                "\"LAST_UPLOAD_ERROR_INFO\" TEXT," + // 6: lastUploadErrorInfo
                "\"TO_SERVICE\" INTEGER);"); // 7: toService
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONITOR_IMG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonitorImgEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        String monitorAddress = entity.getMonitorAddress();
        if (monitorAddress != null) {
            stmt.bindString(3, monitorAddress);
        }
 
        String imgLocalSavePath = entity.getImgLocalSavePath();
        if (imgLocalSavePath != null) {
            stmt.bindString(4, imgLocalSavePath);
        }
 
        String ossObjectKey = entity.getOssObjectKey();
        if (ossObjectKey != null) {
            stmt.bindString(5, ossObjectKey);
        }
        stmt.bindLong(6, entity.getHaveUploadCount());
 
        String lastUploadErrorInfo = entity.getLastUploadErrorInfo();
        if (lastUploadErrorInfo != null) {
            stmt.bindString(7, lastUploadErrorInfo);
        }
 
        Integer toService = entity.getToService();
        if (toService != null) {
            stmt.bindLong(8, toService);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonitorImgEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        String monitorAddress = entity.getMonitorAddress();
        if (monitorAddress != null) {
            stmt.bindString(3, monitorAddress);
        }
 
        String imgLocalSavePath = entity.getImgLocalSavePath();
        if (imgLocalSavePath != null) {
            stmt.bindString(4, imgLocalSavePath);
        }
 
        String ossObjectKey = entity.getOssObjectKey();
        if (ossObjectKey != null) {
            stmt.bindString(5, ossObjectKey);
        }
        stmt.bindLong(6, entity.getHaveUploadCount());
 
        String lastUploadErrorInfo = entity.getLastUploadErrorInfo();
        if (lastUploadErrorInfo != null) {
            stmt.bindString(7, lastUploadErrorInfo);
        }
 
        Integer toService = entity.getToService();
        if (toService != null) {
            stmt.bindLong(8, toService);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MonitorImgEntity readEntity(Cursor cursor, int offset) {
        MonitorImgEntity entity = new MonitorImgEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // monitorAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgLocalSavePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ossObjectKey
            cursor.getInt(offset + 5), // haveUploadCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastUploadErrorInfo
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // toService
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonitorImgEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMonitorAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgLocalSavePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOssObjectKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHaveUploadCount(cursor.getInt(offset + 5));
        entity.setLastUploadErrorInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToService(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonitorImgEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonitorImgEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonitorImgEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
