package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.DeliveryRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DELIVERY_RECORD_ENTITY".
*/
public class DeliveryRecordEntityDao extends AbstractDao<DeliveryRecordEntity, Long> {

    public static final String TABLENAME = "DELIVERY_RECORD_ENTITY";

    /**
     * Properties of entity DeliveryRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order_id = new Property(1, String.class, "order_id", false, "ORDER_ID");
        public final static Property Delivery_content = new Property(2, String.class, "delivery_content", false, "DELIVERY_CONTENT");
        public final static Property User_token = new Property(3, String.class, "user_token", false, "USER_TOKEN");
        public final static Property Date_time = new Property(4, String.class, "date_time", false, "DATE_TIME");
        public final static Property Time_mills = new Property(5, long.class, "time_mills", false, "TIME_MILLS");
        public final static Property LoginType = new Property(6, String.class, "loginType", false, "LOGIN_TYPE");
        public final static Property LoginValue = new Property(7, String.class, "loginValue", false, "LOGIN_VALUE");
        public final static Property UploadStatus = new Property(8, Integer.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property RvmDetail = new Property(9, String.class, "rvmDetail", false, "RVM_DETAIL");
        public final static Property ToPostService = new Property(10, Integer.class, "toPostService", false, "TO_POST_SERVICE");
    }


    public DeliveryRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DeliveryRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DELIVERY_RECORD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: order_id
                "\"DELIVERY_CONTENT\" TEXT," + // 2: delivery_content
                "\"USER_TOKEN\" TEXT," + // 3: user_token
                "\"DATE_TIME\" TEXT," + // 4: date_time
                "\"TIME_MILLS\" INTEGER NOT NULL ," + // 5: time_mills
                "\"LOGIN_TYPE\" TEXT," + // 6: loginType
                "\"LOGIN_VALUE\" TEXT," + // 7: loginValue
                "\"UPLOAD_STATUS\" INTEGER NOT NULL ," + // 8: uploadStatus
                "\"RVM_DETAIL\" TEXT," + // 9: rvmDetail
                "\"TO_POST_SERVICE\" INTEGER);"); // 10: toPostService
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DELIVERY_RECORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeliveryRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
 
        String delivery_content = entity.getDelivery_content();
        if (delivery_content != null) {
            stmt.bindString(3, delivery_content);
        }
 
        String user_token = entity.getUser_token();
        if (user_token != null) {
            stmt.bindString(4, user_token);
        }
 
        String date_time = entity.getDate_time();
        if (date_time != null) {
            stmt.bindString(5, date_time);
        }
        stmt.bindLong(6, entity.getTime_mills());
 
        String loginType = entity.getLoginType();
        if (loginType != null) {
            stmt.bindString(7, loginType);
        }
 
        String loginValue = entity.getLoginValue();
        if (loginValue != null) {
            stmt.bindString(8, loginValue);
        }
        stmt.bindLong(9, entity.getUploadStatus());
 
        String rvmDetail = entity.getRvmDetail();
        if (rvmDetail != null) {
            stmt.bindString(10, rvmDetail);
        }
 
        Integer toPostService = entity.getToPostService();
        if (toPostService != null) {
            stmt.bindLong(11, toPostService);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeliveryRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
 
        String delivery_content = entity.getDelivery_content();
        if (delivery_content != null) {
            stmt.bindString(3, delivery_content);
        }
 
        String user_token = entity.getUser_token();
        if (user_token != null) {
            stmt.bindString(4, user_token);
        }
 
        String date_time = entity.getDate_time();
        if (date_time != null) {
            stmt.bindString(5, date_time);
        }
        stmt.bindLong(6, entity.getTime_mills());
 
        String loginType = entity.getLoginType();
        if (loginType != null) {
            stmt.bindString(7, loginType);
        }
 
        String loginValue = entity.getLoginValue();
        if (loginValue != null) {
            stmt.bindString(8, loginValue);
        }
        stmt.bindLong(9, entity.getUploadStatus());
 
        String rvmDetail = entity.getRvmDetail();
        if (rvmDetail != null) {
            stmt.bindString(10, rvmDetail);
        }
 
        Integer toPostService = entity.getToPostService();
        if (toPostService != null) {
            stmt.bindLong(11, toPostService);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeliveryRecordEntity readEntity(Cursor cursor, int offset) {
        DeliveryRecordEntity entity = new DeliveryRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // order_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // delivery_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date_time
            cursor.getLong(offset + 5), // time_mills
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // loginType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // loginValue
            cursor.getInt(offset + 8), // uploadStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rvmDetail
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // toPostService
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeliveryRecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDelivery_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_token(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime_mills(cursor.getLong(offset + 5));
        entity.setLoginType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLoginValue(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUploadStatus(cursor.getInt(offset + 8));
        entity.setRvmDetail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setToPostService(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeliveryRecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeliveryRecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeliveryRecordEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
