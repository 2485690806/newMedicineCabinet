package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.PocEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POC_ENTITY".
*/
public class PocEntityDao extends AbstractDao<PocEntity, Long> {

    public static final String TABLENAME = "POC_ENTITY";

    /**
     * Properties of entity PocEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order_id = new Property(1, String.class, "order_id", false, "ORDER_ID");
        public final static Property Start_time = new Property(2, long.class, "start_time", false, "START_TIME");
        public final static Property Second_start_time = new Property(3, long.class, "second_start_time", false, "SECOND_START_TIME");
        public final static Property End_time = new Property(4, long.class, "end_time", false, "END_TIME");
        public final static Property Second_end_time = new Property(5, long.class, "second_end_time", false, "SECOND_END_TIME");
        public final static Property LocalVideoPaths = new Property(6, String.class, "localVideoPaths", false, "LOCAL_VIDEO_PATHS");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public PocEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PocEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POC_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: order_id
                "\"START_TIME\" INTEGER NOT NULL ," + // 2: start_time
                "\"SECOND_START_TIME\" INTEGER NOT NULL ," + // 3: second_start_time
                "\"END_TIME\" INTEGER NOT NULL ," + // 4: end_time
                "\"SECOND_END_TIME\" INTEGER NOT NULL ," + // 5: second_end_time
                "\"LOCAL_VIDEO_PATHS\" TEXT," + // 6: localVideoPaths
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POC_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PocEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
        stmt.bindLong(3, entity.getStart_time());
        stmt.bindLong(4, entity.getSecond_start_time());
        stmt.bindLong(5, entity.getEnd_time());
        stmt.bindLong(6, entity.getSecond_end_time());
 
        String localVideoPaths = entity.getLocalVideoPaths();
        if (localVideoPaths != null) {
            stmt.bindString(7, localVideoPaths);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PocEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
        stmt.bindLong(3, entity.getStart_time());
        stmt.bindLong(4, entity.getSecond_start_time());
        stmt.bindLong(5, entity.getEnd_time());
        stmt.bindLong(6, entity.getSecond_end_time());
 
        String localVideoPaths = entity.getLocalVideoPaths();
        if (localVideoPaths != null) {
            stmt.bindString(7, localVideoPaths);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PocEntity readEntity(Cursor cursor, int offset) {
        PocEntity entity = new PocEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // order_id
            cursor.getLong(offset + 2), // start_time
            cursor.getLong(offset + 3), // second_start_time
            cursor.getLong(offset + 4), // end_time
            cursor.getLong(offset + 5), // second_end_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // localVideoPaths
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PocEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStart_time(cursor.getLong(offset + 2));
        entity.setSecond_start_time(cursor.getLong(offset + 3));
        entity.setEnd_time(cursor.getLong(offset + 4));
        entity.setSecond_end_time(cursor.getLong(offset + 5));
        entity.setLocalVideoPaths(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PocEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PocEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PocEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
