package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.RubbishPostEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RUBBISH_POST_ENTITY".
*/
public class RubbishPostEntityDao extends AbstractDao<RubbishPostEntity, Long> {

    public static final String TABLENAME = "RUBBISH_POST_ENTITY";

    /**
     * Properties of entity RubbishPostEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DoorOpenId = new Property(1, long.class, "doorOpenId", false, "DOOR_OPEN_ID");
        public final static Property BoxCode = new Property(2, String.class, "boxCode", false, "BOX_CODE");
        public final static Property LockNO = new Property(3, int.class, "lockNO", false, "LOCK_NO");
        public final static Property TypeCode = new Property(4, String.class, "typeCode", false, "TYPE_CODE");
        public final static Property Count = new Property(5, int.class, "count", false, "COUNT");
        public final static Property TypeName = new Property(6, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Price = new Property(7, double.class, "price", false, "PRICE");
        public final static Property Unit = new Property(8, String.class, "unit", false, "UNIT");
        public final static Property Cost = new Property(9, int.class, "cost", false, "COST");
        public final static Property ErrMsg = new Property(10, String.class, "errMsg", false, "ERR_MSG");
        public final static Property LocalPath = new Property(11, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property MinPostingValue = new Property(12, double.class, "minPostingValue", false, "MIN_POSTING_VALUE");
        public final static Property DailyPostingCount = new Property(13, int.class, "dailyPostingCount", false, "DAILY_POSTING_COUNT");
        public final static Property UserOneTimeCount = new Property(14, int.class, "userOneTimeCount", false, "USER_ONE_TIME_COUNT");
        public final static Property StartDeliveryTime = new Property(15, long.class, "startDeliveryTime", false, "START_DELIVERY_TIME");
        public final static Property UserId = new Property(16, String.class, "userId", false, "USER_ID");
        public final static Property OrderId = new Property(17, String.class, "orderId", false, "ORDER_ID");
        public final static Property Units = new Property(18, String.class, "units", false, "UNITS");
        public final static Property Barcode = new Property(19, String.class, "barcode", false, "BARCODE");
    }


    public RubbishPostEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RubbishPostEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RUBBISH_POST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOOR_OPEN_ID\" INTEGER NOT NULL ," + // 1: doorOpenId
                "\"BOX_CODE\" TEXT," + // 2: boxCode
                "\"LOCK_NO\" INTEGER NOT NULL ," + // 3: lockNO
                "\"TYPE_CODE\" TEXT," + // 4: typeCode
                "\"COUNT\" INTEGER NOT NULL ," + // 5: count
                "\"TYPE_NAME\" TEXT," + // 6: typeName
                "\"PRICE\" REAL NOT NULL ," + // 7: price
                "\"UNIT\" TEXT," + // 8: unit
                "\"COST\" INTEGER NOT NULL ," + // 9: cost
                "\"ERR_MSG\" TEXT," + // 10: errMsg
                "\"LOCAL_PATH\" TEXT," + // 11: localPath
                "\"MIN_POSTING_VALUE\" REAL NOT NULL ," + // 12: minPostingValue
                "\"DAILY_POSTING_COUNT\" INTEGER NOT NULL ," + // 13: dailyPostingCount
                "\"USER_ONE_TIME_COUNT\" INTEGER NOT NULL ," + // 14: userOneTimeCount
                "\"START_DELIVERY_TIME\" INTEGER NOT NULL ," + // 15: startDeliveryTime
                "\"USER_ID\" TEXT," + // 16: userId
                "\"ORDER_ID\" TEXT," + // 17: orderId
                "\"UNITS\" TEXT," + // 18: units
                "\"BARCODE\" TEXT);"); // 19: barcode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RUBBISH_POST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RubbishPostEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDoorOpenId());
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(3, boxCode);
        }
        stmt.bindLong(4, entity.getLockNO());
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(5, typeCode);
        }
        stmt.bindLong(6, entity.getCount());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(7, typeName);
        }
        stmt.bindDouble(8, entity.getPrice());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(9, unit);
        }
        stmt.bindLong(10, entity.getCost());
 
        String errMsg = entity.getErrMsg();
        if (errMsg != null) {
            stmt.bindString(11, errMsg);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(12, localPath);
        }
        stmt.bindDouble(13, entity.getMinPostingValue());
        stmt.bindLong(14, entity.getDailyPostingCount());
        stmt.bindLong(15, entity.getUserOneTimeCount());
        stmt.bindLong(16, entity.getStartDeliveryTime());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(18, orderId);
        }
 
        String units = entity.getUnits();
        if (units != null) {
            stmt.bindString(19, units);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(20, barcode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RubbishPostEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDoorOpenId());
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(3, boxCode);
        }
        stmt.bindLong(4, entity.getLockNO());
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(5, typeCode);
        }
        stmt.bindLong(6, entity.getCount());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(7, typeName);
        }
        stmt.bindDouble(8, entity.getPrice());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(9, unit);
        }
        stmt.bindLong(10, entity.getCost());
 
        String errMsg = entity.getErrMsg();
        if (errMsg != null) {
            stmt.bindString(11, errMsg);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(12, localPath);
        }
        stmt.bindDouble(13, entity.getMinPostingValue());
        stmt.bindLong(14, entity.getDailyPostingCount());
        stmt.bindLong(15, entity.getUserOneTimeCount());
        stmt.bindLong(16, entity.getStartDeliveryTime());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(18, orderId);
        }
 
        String units = entity.getUnits();
        if (units != null) {
            stmt.bindString(19, units);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(20, barcode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RubbishPostEntity readEntity(Cursor cursor, int offset) {
        RubbishPostEntity entity = new RubbishPostEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // doorOpenId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // boxCode
            cursor.getInt(offset + 3), // lockNO
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // typeCode
            cursor.getInt(offset + 5), // count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // typeName
            cursor.getDouble(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // unit
            cursor.getInt(offset + 9), // cost
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // errMsg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // localPath
            cursor.getDouble(offset + 12), // minPostingValue
            cursor.getInt(offset + 13), // dailyPostingCount
            cursor.getInt(offset + 14), // userOneTimeCount
            cursor.getLong(offset + 15), // startDeliveryTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // orderId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // units
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // barcode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RubbishPostEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDoorOpenId(cursor.getLong(offset + 1));
        entity.setBoxCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLockNO(cursor.getInt(offset + 3));
        entity.setTypeCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.getInt(offset + 5));
        entity.setTypeName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.getDouble(offset + 7));
        entity.setUnit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCost(cursor.getInt(offset + 9));
        entity.setErrMsg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocalPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMinPostingValue(cursor.getDouble(offset + 12));
        entity.setDailyPostingCount(cursor.getInt(offset + 13));
        entity.setUserOneTimeCount(cursor.getInt(offset + 14));
        entity.setStartDeliveryTime(cursor.getLong(offset + 15));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrderId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUnits(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBarcode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RubbishPostEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RubbishPostEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RubbishPostEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
