package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.Containers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTAINERS".
*/
public class ContainersDao extends AbstractDao<Containers, Long> {

    public static final String TABLENAME = "CONTAINERS";

    /**
     * Properties of entity Containers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AttemptId = new Property(1, String.class, "attemptId", false, "ATTEMPT_ID");
        public final static Property Timestamp = new Property(2, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Accepted = new Property(3, String.class, "accepted", false, "ACCEPTED");
        public final static Property ReturnCode = new Property(4, Integer.class, "returnCode", false, "RETURN_CODE");
        public final static Property Barcode = new Property(5, String.class, "barcode", false, "BARCODE");
        public final static Property Length = new Property(6, Integer.class, "length", false, "LENGTH");
        public final static Property Height = new Property(7, Integer.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(8, Integer.class, "weight", false, "WEIGHT");
        public final static Property ContainerType = new Property(9, String.class, "containerType", false, "CONTAINER_TYPE");
        public final static Property Material = new Property(10, String.class, "material", false, "MATERIAL");
        public final static Property LogoRecognized = new Property(11, String.class, "logoRecognized", false, "LOGO_RECOGNIZED");
        public final static Property DmCodeRecognized = new Property(12, String.class, "dmCodeRecognized", false, "DM_CODE_RECOGNIZED");
        public final static Property DmRead = new Property(13, String.class, "dmRead", false, "DM_READ");
        public final static Property DepositFee = new Property(14, Double.class, "depositFee", false, "DEPOSIT_FEE");
        public final static Property Name = new Property(15, String.class, "name", false, "NAME");
        public final static Property Picture = new Property(16, String.class, "picture", false, "PICTURE");
        public final static Property TypeCode = new Property(17, String.class, "typeCode", false, "TYPE_CODE");
        public final static Property AiX = new Property(18, Integer.class, "aiX", false, "AI_X");
        public final static Property AiY = new Property(19, Integer.class, "aiY", false, "AI_Y");
        public final static Property AiW = new Property(20, Integer.class, "aiW", false, "AI_W");
        public final static Property AiH = new Property(21, Integer.class, "aiH", false, "AI_H");
        public final static Property MetalFrequency = new Property(22, Integer.class, "metalFrequency", false, "METAL_FREQUENCY");
        public final static Property LengthMin = new Property(23, Integer.class, "lengthMin", false, "LENGTH_MIN");
        public final static Property LengthMax = new Property(24, Integer.class, "lengthMax", false, "LENGTH_MAX");
        public final static Property HeightMin = new Property(25, Integer.class, "heightMin", false, "HEIGHT_MIN");
        public final static Property HeightMax = new Property(26, Integer.class, "heightMax", false, "HEIGHT_MAX");
        public final static Property WeightMin = new Property(27, Integer.class, "weightMin", false, "WEIGHT_MIN");
        public final static Property WeightMax = new Property(28, Integer.class, "weightMax", false, "WEIGHT_MAX");
        public final static Property CurrentDetect = new Property(29, boolean.class, "currentDetect", false, "CURRENT_DETECT");
        public final static Property DoorDetect = new Property(30, boolean.class, "doorDetect", false, "DOOR_DETECT");
        public final static Property CpuUsage = new Property(31, Integer.class, "cpuUsage", false, "CPU_USAGE");
        public final static Property GpuUsage = new Property(32, Integer.class, "gpuUsage", false, "GPU_USAGE");
        public final static Property NpuUsage = new Property(33, String.class, "npuUsage", false, "NPU_USAGE");
        public final static Property MemoryUsage = new Property(34, Integer.class, "memoryUsage", false, "MEMORY_USAGE");
    }


    public ContainersDao(DaoConfig config) {
        super(config);
    }
    
    public ContainersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTAINERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ATTEMPT_ID\" TEXT," + // 1: attemptId
                "\"TIMESTAMP\" INTEGER," + // 2: timestamp
                "\"ACCEPTED\" TEXT," + // 3: accepted
                "\"RETURN_CODE\" INTEGER," + // 4: returnCode
                "\"BARCODE\" TEXT," + // 5: barcode
                "\"LENGTH\" INTEGER," + // 6: length
                "\"HEIGHT\" INTEGER," + // 7: height
                "\"WEIGHT\" INTEGER," + // 8: weight
                "\"CONTAINER_TYPE\" TEXT," + // 9: containerType
                "\"MATERIAL\" TEXT," + // 10: material
                "\"LOGO_RECOGNIZED\" TEXT," + // 11: logoRecognized
                "\"DM_CODE_RECOGNIZED\" TEXT," + // 12: dmCodeRecognized
                "\"DM_READ\" TEXT," + // 13: dmRead
                "\"DEPOSIT_FEE\" REAL," + // 14: depositFee
                "\"NAME\" TEXT," + // 15: name
                "\"PICTURE\" TEXT," + // 16: picture
                "\"TYPE_CODE\" TEXT," + // 17: typeCode
                "\"AI_X\" INTEGER," + // 18: aiX
                "\"AI_Y\" INTEGER," + // 19: aiY
                "\"AI_W\" INTEGER," + // 20: aiW
                "\"AI_H\" INTEGER," + // 21: aiH
                "\"METAL_FREQUENCY\" INTEGER," + // 22: metalFrequency
                "\"LENGTH_MIN\" INTEGER," + // 23: lengthMin
                "\"LENGTH_MAX\" INTEGER," + // 24: lengthMax
                "\"HEIGHT_MIN\" INTEGER," + // 25: heightMin
                "\"HEIGHT_MAX\" INTEGER," + // 26: heightMax
                "\"WEIGHT_MIN\" INTEGER," + // 27: weightMin
                "\"WEIGHT_MAX\" INTEGER," + // 28: weightMax
                "\"CURRENT_DETECT\" INTEGER NOT NULL ," + // 29: currentDetect
                "\"DOOR_DETECT\" INTEGER NOT NULL ," + // 30: doorDetect
                "\"CPU_USAGE\" INTEGER," + // 31: cpuUsage
                "\"GPU_USAGE\" INTEGER," + // 32: gpuUsage
                "\"NPU_USAGE\" TEXT," + // 33: npuUsage
                "\"MEMORY_USAGE\" INTEGER);"); // 34: memoryUsage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTAINERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Containers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String attemptId = entity.getAttemptId();
        if (attemptId != null) {
            stmt.bindString(2, attemptId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        String accepted = entity.getAccepted();
        if (accepted != null) {
            stmt.bindString(4, accepted);
        }
 
        Integer returnCode = entity.getReturnCode();
        if (returnCode != null) {
            stmt.bindLong(5, returnCode);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(6, barcode);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(7, length);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(8, height);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(9, weight);
        }
 
        String containerType = entity.getContainerType();
        if (containerType != null) {
            stmt.bindString(10, containerType);
        }
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(11, material);
        }
 
        String logoRecognized = entity.getLogoRecognized();
        if (logoRecognized != null) {
            stmt.bindString(12, logoRecognized);
        }
 
        String dmCodeRecognized = entity.getDmCodeRecognized();
        if (dmCodeRecognized != null) {
            stmt.bindString(13, dmCodeRecognized);
        }
 
        String dmRead = entity.getDmRead();
        if (dmRead != null) {
            stmt.bindString(14, dmRead);
        }
 
        Double depositFee = entity.getDepositFee();
        if (depositFee != null) {
            stmt.bindDouble(15, depositFee);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(17, picture);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(18, typeCode);
        }
 
        Integer aiX = entity.getAiX();
        if (aiX != null) {
            stmt.bindLong(19, aiX);
        }
 
        Integer aiY = entity.getAiY();
        if (aiY != null) {
            stmt.bindLong(20, aiY);
        }
 
        Integer aiW = entity.getAiW();
        if (aiW != null) {
            stmt.bindLong(21, aiW);
        }
 
        Integer aiH = entity.getAiH();
        if (aiH != null) {
            stmt.bindLong(22, aiH);
        }
 
        Integer metalFrequency = entity.getMetalFrequency();
        if (metalFrequency != null) {
            stmt.bindLong(23, metalFrequency);
        }
 
        Integer lengthMin = entity.getLengthMin();
        if (lengthMin != null) {
            stmt.bindLong(24, lengthMin);
        }
 
        Integer lengthMax = entity.getLengthMax();
        if (lengthMax != null) {
            stmt.bindLong(25, lengthMax);
        }
 
        Integer heightMin = entity.getHeightMin();
        if (heightMin != null) {
            stmt.bindLong(26, heightMin);
        }
 
        Integer heightMax = entity.getHeightMax();
        if (heightMax != null) {
            stmt.bindLong(27, heightMax);
        }
 
        Integer weightMin = entity.getWeightMin();
        if (weightMin != null) {
            stmt.bindLong(28, weightMin);
        }
 
        Integer weightMax = entity.getWeightMax();
        if (weightMax != null) {
            stmt.bindLong(29, weightMax);
        }
        stmt.bindLong(30, entity.getCurrentDetect() ? 1L: 0L);
        stmt.bindLong(31, entity.getDoorDetect() ? 1L: 0L);
 
        Integer cpuUsage = entity.getCpuUsage();
        if (cpuUsage != null) {
            stmt.bindLong(32, cpuUsage);
        }
 
        Integer gpuUsage = entity.getGpuUsage();
        if (gpuUsage != null) {
            stmt.bindLong(33, gpuUsage);
        }
 
        String npuUsage = entity.getNpuUsage();
        if (npuUsage != null) {
            stmt.bindString(34, npuUsage);
        }
 
        Integer memoryUsage = entity.getMemoryUsage();
        if (memoryUsage != null) {
            stmt.bindLong(35, memoryUsage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Containers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String attemptId = entity.getAttemptId();
        if (attemptId != null) {
            stmt.bindString(2, attemptId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        String accepted = entity.getAccepted();
        if (accepted != null) {
            stmt.bindString(4, accepted);
        }
 
        Integer returnCode = entity.getReturnCode();
        if (returnCode != null) {
            stmt.bindLong(5, returnCode);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(6, barcode);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(7, length);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(8, height);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(9, weight);
        }
 
        String containerType = entity.getContainerType();
        if (containerType != null) {
            stmt.bindString(10, containerType);
        }
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(11, material);
        }
 
        String logoRecognized = entity.getLogoRecognized();
        if (logoRecognized != null) {
            stmt.bindString(12, logoRecognized);
        }
 
        String dmCodeRecognized = entity.getDmCodeRecognized();
        if (dmCodeRecognized != null) {
            stmt.bindString(13, dmCodeRecognized);
        }
 
        String dmRead = entity.getDmRead();
        if (dmRead != null) {
            stmt.bindString(14, dmRead);
        }
 
        Double depositFee = entity.getDepositFee();
        if (depositFee != null) {
            stmt.bindDouble(15, depositFee);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(17, picture);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(18, typeCode);
        }
 
        Integer aiX = entity.getAiX();
        if (aiX != null) {
            stmt.bindLong(19, aiX);
        }
 
        Integer aiY = entity.getAiY();
        if (aiY != null) {
            stmt.bindLong(20, aiY);
        }
 
        Integer aiW = entity.getAiW();
        if (aiW != null) {
            stmt.bindLong(21, aiW);
        }
 
        Integer aiH = entity.getAiH();
        if (aiH != null) {
            stmt.bindLong(22, aiH);
        }
 
        Integer metalFrequency = entity.getMetalFrequency();
        if (metalFrequency != null) {
            stmt.bindLong(23, metalFrequency);
        }
 
        Integer lengthMin = entity.getLengthMin();
        if (lengthMin != null) {
            stmt.bindLong(24, lengthMin);
        }
 
        Integer lengthMax = entity.getLengthMax();
        if (lengthMax != null) {
            stmt.bindLong(25, lengthMax);
        }
 
        Integer heightMin = entity.getHeightMin();
        if (heightMin != null) {
            stmt.bindLong(26, heightMin);
        }
 
        Integer heightMax = entity.getHeightMax();
        if (heightMax != null) {
            stmt.bindLong(27, heightMax);
        }
 
        Integer weightMin = entity.getWeightMin();
        if (weightMin != null) {
            stmt.bindLong(28, weightMin);
        }
 
        Integer weightMax = entity.getWeightMax();
        if (weightMax != null) {
            stmt.bindLong(29, weightMax);
        }
        stmt.bindLong(30, entity.getCurrentDetect() ? 1L: 0L);
        stmt.bindLong(31, entity.getDoorDetect() ? 1L: 0L);
 
        Integer cpuUsage = entity.getCpuUsage();
        if (cpuUsage != null) {
            stmt.bindLong(32, cpuUsage);
        }
 
        Integer gpuUsage = entity.getGpuUsage();
        if (gpuUsage != null) {
            stmt.bindLong(33, gpuUsage);
        }
 
        String npuUsage = entity.getNpuUsage();
        if (npuUsage != null) {
            stmt.bindString(34, npuUsage);
        }
 
        Integer memoryUsage = entity.getMemoryUsage();
        if (memoryUsage != null) {
            stmt.bindLong(35, memoryUsage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Containers readEntity(Cursor cursor, int offset) {
        Containers entity = new Containers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // attemptId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accepted
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // returnCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // barcode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // length
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // height
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // weight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // containerType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // material
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // logoRecognized
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dmCodeRecognized
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // dmRead
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // depositFee
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // picture
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // typeCode
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // aiX
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // aiY
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // aiW
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // aiH
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // metalFrequency
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // lengthMin
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // lengthMax
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // heightMin
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // heightMax
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // weightMin
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // weightMax
            cursor.getShort(offset + 29) != 0, // currentDetect
            cursor.getShort(offset + 30) != 0, // doorDetect
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // cpuUsage
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // gpuUsage
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // npuUsage
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34) // memoryUsage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Containers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttemptId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAccepted(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReturnCode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBarcode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLength(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHeight(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWeight(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setContainerType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaterial(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLogoRecognized(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDmCodeRecognized(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDmRead(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDepositFee(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPicture(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTypeCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAiX(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setAiY(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setAiW(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAiH(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setMetalFrequency(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setLengthMin(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setLengthMax(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setHeightMin(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setHeightMax(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setWeightMin(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setWeightMax(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setCurrentDetect(cursor.getShort(offset + 29) != 0);
        entity.setDoorDetect(cursor.getShort(offset + 30) != 0);
        entity.setCpuUsage(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setGpuUsage(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setNpuUsage(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setMemoryUsage(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Containers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Containers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Containers entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
