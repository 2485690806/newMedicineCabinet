package leesche.smartrecycling.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import leesche.smartrecycling.base.entity.BarCodeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAR_CODE_INFO".
*/
public class BarCodeInfoDao extends AbstractDao<BarCodeInfo, Long> {

    public static final String TABLENAME = "BAR_CODE_INFO";

    /**
     * Properties of entity BarCodeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Barcode = new Property(2, String.class, "barcode", false, "BARCODE");
        public final static Property Material = new Property(3, String.class, "material", false, "MATERIAL");
        public final static Property ContainerType = new Property(4, String.class, "containerType", false, "CONTAINER_TYPE");
        public final static Property LengthMin = new Property(5, Integer.class, "lengthMin", false, "LENGTH_MIN");
        public final static Property LengthMax = new Property(6, Integer.class, "lengthMax", false, "LENGTH_MAX");
        public final static Property HeightMin = new Property(7, Integer.class, "heightMin", false, "HEIGHT_MIN");
        public final static Property HeightMax = new Property(8, Integer.class, "heightMax", false, "HEIGHT_MAX");
        public final static Property WeightMin = new Property(9, Integer.class, "weightMin", false, "WEIGHT_MIN");
        public final static Property WeightMax = new Property(10, Integer.class, "weightMax", false, "WEIGHT_MAX");
        public final static Property Capacity = new Property(11, Integer.class, "capacity", false, "CAPACITY");
        public final static Property DepositFee = new Property(12, Double.class, "depositFee", false, "DEPOSIT_FEE");
        public final static Property DMRecognitionType = new Property(13, String.class, "dMRecognitionType", false, "D_MRECOGNITION_TYPE");
    }


    public BarCodeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BarCodeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAR_CODE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"BARCODE\" TEXT," + // 2: barcode
                "\"MATERIAL\" TEXT," + // 3: material
                "\"CONTAINER_TYPE\" TEXT," + // 4: containerType
                "\"LENGTH_MIN\" INTEGER," + // 5: lengthMin
                "\"LENGTH_MAX\" INTEGER," + // 6: lengthMax
                "\"HEIGHT_MIN\" INTEGER," + // 7: heightMin
                "\"HEIGHT_MAX\" INTEGER," + // 8: heightMax
                "\"WEIGHT_MIN\" INTEGER," + // 9: weightMin
                "\"WEIGHT_MAX\" INTEGER," + // 10: weightMax
                "\"CAPACITY\" INTEGER," + // 11: capacity
                "\"DEPOSIT_FEE\" REAL," + // 12: depositFee
                "\"D_MRECOGNITION_TYPE\" TEXT);"); // 13: dMRecognitionType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAR_CODE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BarCodeInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(3, barcode);
        }
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(4, material);
        }
 
        String containerType = entity.getContainerType();
        if (containerType != null) {
            stmt.bindString(5, containerType);
        }
 
        Integer lengthMin = entity.getLengthMin();
        if (lengthMin != null) {
            stmt.bindLong(6, lengthMin);
        }
 
        Integer lengthMax = entity.getLengthMax();
        if (lengthMax != null) {
            stmt.bindLong(7, lengthMax);
        }
 
        Integer heightMin = entity.getHeightMin();
        if (heightMin != null) {
            stmt.bindLong(8, heightMin);
        }
 
        Integer heightMax = entity.getHeightMax();
        if (heightMax != null) {
            stmt.bindLong(9, heightMax);
        }
 
        Integer weightMin = entity.getWeightMin();
        if (weightMin != null) {
            stmt.bindLong(10, weightMin);
        }
 
        Integer weightMax = entity.getWeightMax();
        if (weightMax != null) {
            stmt.bindLong(11, weightMax);
        }
 
        Integer capacity = entity.getCapacity();
        if (capacity != null) {
            stmt.bindLong(12, capacity);
        }
 
        Double depositFee = entity.getDepositFee();
        if (depositFee != null) {
            stmt.bindDouble(13, depositFee);
        }
 
        String dMRecognitionType = entity.getDMRecognitionType();
        if (dMRecognitionType != null) {
            stmt.bindString(14, dMRecognitionType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BarCodeInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(3, barcode);
        }
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(4, material);
        }
 
        String containerType = entity.getContainerType();
        if (containerType != null) {
            stmt.bindString(5, containerType);
        }
 
        Integer lengthMin = entity.getLengthMin();
        if (lengthMin != null) {
            stmt.bindLong(6, lengthMin);
        }
 
        Integer lengthMax = entity.getLengthMax();
        if (lengthMax != null) {
            stmt.bindLong(7, lengthMax);
        }
 
        Integer heightMin = entity.getHeightMin();
        if (heightMin != null) {
            stmt.bindLong(8, heightMin);
        }
 
        Integer heightMax = entity.getHeightMax();
        if (heightMax != null) {
            stmt.bindLong(9, heightMax);
        }
 
        Integer weightMin = entity.getWeightMin();
        if (weightMin != null) {
            stmt.bindLong(10, weightMin);
        }
 
        Integer weightMax = entity.getWeightMax();
        if (weightMax != null) {
            stmt.bindLong(11, weightMax);
        }
 
        Integer capacity = entity.getCapacity();
        if (capacity != null) {
            stmt.bindLong(12, capacity);
        }
 
        Double depositFee = entity.getDepositFee();
        if (depositFee != null) {
            stmt.bindDouble(13, depositFee);
        }
 
        String dMRecognitionType = entity.getDMRecognitionType();
        if (dMRecognitionType != null) {
            stmt.bindString(14, dMRecognitionType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BarCodeInfo readEntity(Cursor cursor, int offset) {
        BarCodeInfo entity = new BarCodeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // barcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // material
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // containerType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lengthMin
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // lengthMax
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // heightMin
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // heightMax
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // weightMin
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // weightMax
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // capacity
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // depositFee
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // dMRecognitionType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BarCodeInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaterial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContainerType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLengthMin(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLengthMax(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHeightMin(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHeightMax(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWeightMin(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setWeightMax(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCapacity(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDepositFee(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setDMRecognitionType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BarCodeInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BarCodeInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BarCodeInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
